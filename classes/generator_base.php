<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * File containing the generator_base class.
 *
 * @package    tool_pluginkenobi
 * @copyright  2016 Alexandru Elisei
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

defined('MOODLE_INTERNAL') || die();

require_once(__DIR__ . '/template_processor.php');
require_once(__DIR__ . '/processor.php');

/**
 * Generator_base class.
 *
 * @package    tool_pluginkenobi
 * @copyright  2016 Alexandru Elisei
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
abstract class tool_pluginkenobi_generator_base {
    /** @var string The component name. */
    protected $component;

    /** @var string Default plugin location. */
    protected $defaultlocation;

    /** @var string Directory where the plugin files will be generated. */
    protected $targetdir;

    /** @var string[] Recipe for generating the plugin. */
    protected $recipe = array();

    /** @var string[] The files that will be generated by the plugin. */
    protected $outputfiles = array();

    /** @var $string[] List of features for the plugin. */
    protected $features = array();

    /** @var $stdClass[] List of helper generators to be used when generating the files. */
    protected $helpergenerators = array();

    /**
     * Class constructor.
     *
     * @throws moodle_exception.
     * @param string[] $recipe Plugin recipe.
     * @param string $targetdir The target directory.
     */
    public function __construct($recipe, $targetdir) {
        global $CFG;

        $this->recipe['author']['name'] = $recipe['author']['name'];
        $this->recipe['author']['email'] = $recipe['author']['email'];
        $this->component = $recipe['component'];
        $this->targetdir = empty($targetdir) ? $this->defaultlocation : $targetdir;

        // Adding the boilerplate variables.
        foreach (tool_pluginkenobi_processor::$boilerplateoptions as $option) {
            $this->recipe[$option] = $recipe[$option];
        }

        // Core features will always be generated.
        $requestedfeatures = array('core');
        if (!empty($recipe['features']) && is_array($recipe['features'])) {
            if (!empty($recipe['features']['all'])) {
                    foreach ($this->features as $feature => $notused) {
                        if ($feature !== 'core') {
                            $requestedfeatures[] = $feature;
                        }
                    }
            } else {
                foreach ($this->features as $feature => $notused) {
                    if (!empty($recipe['features'][$feature]) && $recipe['features'][$feature] === true) {
                        $requestedfeatures[] = $feature;
                    }
                }
            }
        }

        foreach ($requestedfeatures as $feature) {
            if (is_array($this->features[$feature])) {
                list($required, $invalid) = $this->validate_options($recipe, $this->features[$feature]['requiredoptions'], true);
                if (!is_null($invalid)) {
                    throw new moodle_exception('Invalid or missing option "' . $invalid . '"');
                }
                if (!empty($required)) {
                    foreach ($required as $option => $value) {
                        $this->recipe[$option] = $value;
                    }
                }

                list($optional, $invalid) = $this->validate_options($recipe, $this->features[$feature]['optionaloptions']);
                if (!is_null($invalid)) {
                    throw new moodle_exception('Invalid value "' . $recipe[$invalid] . '" for feature ' . $feature);
                }
                if (!empty($optional)) {
                    foreach ($optional as $option => $value) {
                        $this->recipe[$option] = $value;
                    }
                }

                $this->add_feature_files($feature);
            } else {
                require_once(__DIR__ . '/' . $this->features[$feature] . '.php');
                $generatorname = 'tool_pluginkenobi_' . $this->features[$feature];
                $helper = new $generatorname($recipe, $this->targetdir);
                $this->helpergenerators[] = $helper;
            }
        }
    }

    /**
     * Generates all the files needed for the plugin.
     */
    public function generate_files() {
        global $CFG;

        $targetpath = $this->prepare_target_path();
        foreach ($this->outputfiles as $template => $outputfile) {
            // Preparing the location of the template file and the generated file.
            $templatepath = $CFG->dirroot . '/admin/tool/pluginkenobi/' . $template;
            $contents = tool_pluginkenobi_template_processor::load($templatepath, $this->recipe);
            $outputfilepath = $this->prepare_file_path($targetpath, $outputfile);

            $filehandle = fopen($outputfilepath, 'w');
            fputs($filehandle, $contents);
            fclose($filehandle);
        }

        foreach ($this->helpergenerators as $generator) {
            $generator->generate_files();
        }
    }

    /**
     * Prepares the location of a file by creating all the necessary subdirectories.
     *
     * @param string $targetpath The target path for the plugin.
     * @param string $filepath The file path.
     * @return string The prepared path.
     */
    protected function prepare_file_path($targetpath, $filepath) {
        $outputfilepath = $targetpath . '/' . $filepath;
        if (file_exists($outputfilepath)) {
            throw new moodle_exception('File "' . $outputfilepath . '" already exists');
        } else {
            $dirpath = dirname($outputfilepath);
            // Creating the directory hierarchy if it doesn't exist.
            if (!file_exists($dirpath)) {
                $result = mkdir($dirpath, 0755, true);
                if ($result === false) {
                    throw new moodle_exception('Cannot create directory "' . $dirpath . '"');
                }
            }
        }

        return $outputfilepath;
    }

    /**
     * Returns the directory where the plugin will be created.
     * This directory does not include the plugin name.
     *
     * @return string The target directory.
     */
    public function get_target_directory() {
        return $this->targetdir;
    }

    /**
     * Checks if a given option is valid.
     *
     * @param string $option The option to be validated.
     * @return string | null The validated option value or null if it's not a valid value.
     */
    protected function validate_value($option, $value) {
        if (empty($value)) {
            return null;
        } else {
            return $value;
        }
    }

    /**
     * Prepares the path to the directory where the plugin's files will be generated.
     * All the subdirectories on the path will be generated.
     *
     * @param string $targetdir The directory specified by the user.
     * @param string $component The component name.
     */
    protected function prepare_target_path() {
        list($unused, $plugin) = core_component::normalize_component($this->component);
        $targetpath = $this->targetdir . '/' . $plugin;

        if (!file_exists($targetpath)) {
            $result = mkdir($targetpath, 0755, true);
            if ($result === false) {
                throw new moodle_exception('Cannot create directory "' . $path . '"');
            }
        }

        return $targetpath;
    }

    /**
     * Validates the recipe by verifying if the specified options are present.
     *
     * @param string[] $recipe The recipe.
     * @param string[] $options The options to validate against.
     * @param bool $mustexist If the options must exist in the recipe in order to pass validation.
     */
    protected function validate_options($recipe, $options, $mustexist = false) {
        if (empty($options)) {
            return array(null, null);
        }

        $validated = array();
        foreach ($options as $option) {
            if ($mustexist && empty($recipe[$option])) {
                return array(null, $option);
            }

            if (!empty($recipe[$option])) {
                $value = $this->validate_value($option, $recipe[$option]);
                if (is_null($value)) {
                    return array(null, $option);
                }
                $validated[$option] = $value;
            }
        }

        return array($validated, null);
    }

    /**
     * Adds all the files needed by $feature to the list of generated files.
     *
     * @param string $feature The feature name.
     */
    protected function add_feature_files($feature) {
        if (!empty($this->features[$feature]['files'])) {
            foreach ($this->features[$feature]['files'] as $template => $outputfile) {
                $this->outputfiles[$template] = $outputfile;
            }
        }
    }
}
