<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * File containing the helper_generator_base class.
 *
 * @package    tool_pluginkenobi
 * @copyright  2016 Alexandru Elisei
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

defined('MOODLE_INTERNAL') || die();

require_once(__DIR__ . '/template_processor.php');
require_once(__DIR__ . '/processor.php');

/**
 * Helper_generator_base class.
 *
 * @package    tool_pluginkenobi
 * @copyright  2016 Alexandru Elisei
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
abstract class tool_pluginkenobi_helper_generator_base extends tool_pluginkenobi_generator_base {
    /** @var string The component name. */
    protected $component;

    /** @var string Directory where the plugin files will be generated. */
    protected $targetdir;

    /** @var string[] Recipe for generating the plugin. */
    protected $recipe = array();

    /** @var string[] The files that will be generated by the plugin. */
    protected $outputfiles = array();

    /** @var $string[] List of features for the plugin. */
    protected $features = array();

    /** @var string What feature the helper generator is implementing. */
    protected $implementedfeature = null;

    /**
     * Returns an array of features requested in the recipe.
     *
     * Helper generators only have the 'core' feature.
     *
     * @param string[] $recipe The recipe.
     * @return string[] The requested features.
     */
    protected function get_requested_features($recipe) {
        return array('core');
    }

    /**
     * Sets the value for the target directory based on the argument passed to the constructor.
     *
     * @param string $targetdir The supplied target directory.
     * @return string The target directory.
     */
    protected function set_target_directory($targetdir) {
        $this->targetdir = $targetdir;
    }

    /**
     * Returns the options specified in the recipe.
     *
     * @param string $feature
     * @param string[] $recipe
     * @return string[] | bool The recipe options or true if all the features were requested.
     */
    protected function get_feature_options($feature, $recipe) {
        if (empty($this->implementedfeature)) {
            throw new coding_error('Class variable $implementedfeature not defined for class ' . get_class($this));
        }

        if (!empty($recipe['features'][$this->implementedfeature])) {
            $options = $recipe['features'][$this->implementedfeature];
        } else {
            // All the features were requested.
            $options = true;
        }

        return $options;
    }

    /**
     * Extracts and validates the options needed for the feature.
     *
     * @throws moodle_exception
     * @param string $feature The feature name.
     * @param string[] $recipe The plugin recipe.
     */
    protected function process_feature_options($feature, $recipe) {
        $options = $this->get_feature_options($feature, $recipe);

        $expected = $this->features[$feature]['requiredoptions'];
        $required = $this->validate_options($options, $expected, true);
        if (!empty($required)) {
            foreach ($required as $option => $value) {
                $this->recipe['features'][$this->implementedfeature][$option] = $value;
            }
        }

        $expected = $this->features[$feature]['optionaloptions'];
        $optional = $this->validate_options($options, $expected);
        if (!empty($optional)) {
            foreach ($optional as $option => $value) {
                $this->recipe['features'][$this->implementedfeature][$option] = $value;
            }
        }
    }
}
